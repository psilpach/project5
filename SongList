package prj5;

import java.util.Iterator;
import java.util.NoSuchElementException;
import list.ListInterface;

/**
 * creates a list of songs
 * 
 * @author Pim Silpacharn pims617
 * @author Kevin Benson kbenson8
 * @author Danni Nicholls ndanni4
 * @version 4/25/17
 */
public class SongList implements ListInterface<Song> {
    // fields
    private int size;
    private int numPeople;

    private SongNode head;
    private SongNode tail;


    /**
     * default constructor
     */
    public SongList() {
        init();
    }


    /**
     * intializes two sentinal nodes for doubly linked list
     */
    private void init() {
        head = new SongList.SongNode(null);
        tail = new SongList.SongNode(null);
        head.setNext(tail);
        tail.setPrevious(head);
        size = 0;
    }


    /**
     * 
     * @param p
     *            person to be added
     */
    public void addPerson(Person p) {
        numPeople++;
        // goes through all of the songs
        // update songs for that person

        SongNode currentNode = head.next;
        for (int i = 0; i < getLength(); i++) {
            Song song = currentNode.getSong();
            song.addPerson(p, i);

            currentNode = currentNode.next;
        }
    }


    /**
     * 
     * @param index
     *            index
     * @return percent that liked the song
     */
    public int[] getPercentLike(int index) {
        return get(index).getPercent(true);
    }


    /**
     * 
     * @param index
     *            index
     * @return percent that heard the song
     */
    public int[] getPercentHeard(int index) {
        return get(index).getPercent(false);
    }


    /**
     * 
     * @return the number of people
     */
    public int getNumPeople() {
        return numPeople;
    }


    /**
     * method that sorts all of the data into the modifier categories
     * 
     * @param modifier
     *            artist, title, genre, year
     */
    public void sortArtist() {
        boolean swapped = (head != null);

        while (swapped) {
            SongNode temp = head.next();

            swapped = false;
            while (temp != null && temp.getSong() != null && temp.next()
                .getSong() != null) {
                Song s = temp.getSong();

                if (s.getArtist().compareTo(temp.next().getSong()
                    .getArtist()) > 0) {
                    SongNode tempNext = temp.next();
                    SongNode tempPrev = temp.previous();
                    tempNext.next().setPrevious(temp);
                    temp.setNext(tempNext.next());
                    temp.setPrevious(tempNext);
                    tempPrev.setNext(tempNext);
                    tempNext.setPrevious(tempPrev);
                    tempNext.setNext(temp);
                    swapped = true;
                } // end if
                else {
                    temp = temp.next();
                } // end else

            } // end while
        } // end while
    } // end class


    public void sortTitle() {
        boolean swapped = (head != null);

        while (swapped) {
            SongNode temp = head.next();

            swapped = false;
            while (temp != null && temp.getSong() != null && temp.next()
                .getSong() != null) {
                Song s = temp.getSong();

                if (s.getTitle().compareTo(temp.next().getSong()
                    .getTitle()) > 0) {
                    SongNode tempNext = temp.next();
                    SongNode tempPrev = temp.previous();
                    tempNext.next().setPrevious(temp);
                    temp.setNext(tempNext.next());
                    temp.setPrevious(tempNext);
                    tempPrev.setNext(tempNext);
                    tempNext.setPrevious(tempPrev);
                    tempNext.setNext(temp);
                    swapped = true;
                }
                else {
                    temp = temp.next();
                }
            }
        }
    }


    public void sortGenre() {
        boolean swapped = (head != null);

        while (swapped) {
            SongNode temp = head.next();

            swapped = false;
            while (temp != null && temp.getSong() != null && temp.next()
                .getSong() != null) {
                Song s = temp.getSong();

                if (s.getGenre().compareTo(temp.next().getSong()
                    .getGenre()) > 0) {
                    SongNode tempNext = temp.next();
                    SongNode tempPrev = temp.previous();
                    tempNext.next().setPrevious(temp);
                    temp.setNext(tempNext.next());
                    temp.setPrevious(tempNext);
                    tempPrev.setNext(tempNext);
                    tempNext.setPrevious(tempPrev);
                    tempNext.setNext(temp);
                    swapped = true;
                }
                else {
                    temp = temp.next();
                }
            }
        }
    }


    public void sortDate() {
        boolean swapped = (head != null);

        while (swapped) {
            SongNode temp = head.next();

            swapped = false;
            while (temp != null && temp.getSong() != null && temp.next()
                .getSong() != null) {
                Song s = temp.getSong();

                if (s.getYear().compareTo(temp.next().getSong()
                    .getYear()) > 0) {
                    SongNode tempNext = temp.next();
                    SongNode tempPrev = temp.previous();
                    tempNext.next().setPrevious(temp);
                    temp.setNext(tempNext.next());
                    temp.setPrevious(tempNext);
                    tempPrev.setNext(tempNext);
                    tempNext.setPrevious(tempPrev);
                    tempNext.setNext(temp);
                    swapped = true;
                }
                else {
                    temp = temp.next();
                }
            }
        }
    }


    /**
     * @return true if empty, false if not
     */
    public boolean isEmpty() {
        return size == 0;
    }


    /**
     * @return length
     */
    public int getLength() {
        return size;
    }


    /**
     * call init method to reset the list
     */
    public void clear() {
        init();
    }


    /**
     * 
     * @param index
     *            index where the song is
     * @return song at index
     */
    public Song get(int index) {
        return getNodeAtIndex(index).getSong();
    }


    /**
     * @param newEntry
     *            song we're adding
     */
    public void add(Song newEntry) {
        add(getLength(), newEntry);
    }


    /**
     * @param index
     *            index where we're adding
     * @param obj
     *            song we want to add
     */
    public void add(int index, Song obj) {

        if (index < 0 || size < index) {
            throw new IndexOutOfBoundsException();
        }
        if (obj == null) {
            throw new IllegalArgumentException("Cannot add null "
                + "objects to a list");
        }

        SongNode nodeAfter;
        if (index == size) {
            nodeAfter = tail;
        }
        else {
            nodeAfter = getNodeAtIndex(index);
        }

        SongNode addition = new SongNode(obj, nodeAfter, nodeAfter.previous());
        nodeAfter.previous().setNext(addition);
        nodeAfter.setPrevious(addition);
        size++;
    }


    /**
     * 
     * @return iterator
     */
    public Iterator<Song> iterator() {
        return new SongIterator();
    }


    /**
     * 
     * @param index
     *            index where node is
     * @return node at index
     */
    public SongNode getNodeAtIndex(int index) {

        if (index < 0 || getLength() <= index) {
            throw new IndexOutOfBoundsException("No element exists");
        }
        SongNode current = head.next();
        for (int i = 0; i < index; i++) {
            current = current.next();
        }
        return current;
    }


    /**
     * @param obj
     *            song we're looking for
     * @return true if it contains it, false if not
     */
    @Override
    public boolean contains(Song obj) {
        // will not use this method
        return false;
    }


    /**
     * @param index
     *            index where the song is
     * @return song at index
     */
    @Override
    public Song getEntry(int index) {
        return getNodeAtIndex(index).getSong();
    }


    /**
     * @param index
     *            to replace at
     * @param song
     *            new song we're replacing
     * @return index to replace at
     */
    @Override
    public Song replace(int index, Song song) {
        // unused method
        return null;
    }


    /**
     * 
     * @return size
     */
    public int size() {
        return size;
    }


    /**
     * @return array representation of the list
     */
    @Override
    public Object[] toArray() {
        // unused method
        return null;
    }


    /**
     * @param index
     *            we're removing at
     * @return song removed
     */
    @Override
    public Song remove(int index) {
        // unused method
        return null;
    }


    /**
     * @author ndanni4
     * @version 4.19.2017
     */
    class SongNode {
        private Song song;
        private SongNode next;
        private SongNode prev;


        /**
         * 
         * @param data
         *            song
         * @param nextNode
         *            next node
         * @param prevNode
         *            next node
         */
        public SongNode(Song data, SongNode nextNode, SongNode prevNode) {
            song = data;
            next = nextNode;
            prev = prevNode;
        }


        /**
         * 
         * @param data
         *            song
         */
        public SongNode(Song data) {
            song = data;
            next = null;
            prev = null;
        }


        /**
         * 
         * @param n
         *            next node we're setting
         */
        public void setNext(SongNode n) {
            next = n;
        }


        /**
         * 
         * @param n
         *            previous node to set
         */
        public void setPrevious(SongNode n) {
            prev = n;
        }


        /**
         * 
         * @return the next node
         */
        public SongNode next() {
            return next;
        }


        /**
         * 
         * @return previous node
         */
        public SongNode previous() {
            return prev;
        }


        /**
         * 
         * @return song in the node
         */
        public Song getSong() {
            return song;
        }
    }


    /**
     * @author pim silpacharn
     * @version 4/17/17
     */
    public class SongIterator implements Iterator<Song> {
        private SongNode currentNode;


        /**
         * default constructor
         */
        public SongIterator() {
            currentNode = head;
        }


        /**
         * @return true if there's a next, false if not
         */
        @Override
        public boolean hasNext() {
            return currentNode.next().getSong() != null;
        }


        /**
         * @return next
         */
        @Override
        public Song next() {

            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            System.out.println(currentNode.getSong());
            currentNode = currentNode.next();
            System.out.println(currentNode.getSong());
            System.out.println("\n\n\n");
            return currentNode.getSong();
        }
    }

}
