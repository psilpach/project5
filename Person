package prj5;

/**
 * Person class to create for hobby major and their state
 * 
 * @author ndanni4
 * @version 4.10.2017
 *
 */
public class Person {

    private MajorEnum major;
    private HobbyEnum hobby;
    private RegionEnum region;
    private String[] heard;
    private String[] liked;


    /**
     * Person constructor
     * 
     * @param hobby
     *            hobby of person
     * @param major
     *            major of person
     * @param state
     *            state lived in
     *            * @param heard
     *            The array of whether or not the Person has heard certain songs
     * @param liked
     *            The array of whether or not the Person has liked certain songs
     */
    public Person(
        HobbyEnum hobby,
        MajorEnum major,
        RegionEnum region,
        String[] heard,
        String[] liked) {
        this.hobby = hobby;
        this.major = major;
        this.region = region;
        this.heard = heard;
        this.liked = liked;
    }


    /**
     * Method returns the heard responses from the person
     * 
     * @return the heard responses from the person
     */
    public String[] getHeard() {

        return heard;
    }


    /**
     * Method returns the liked responses from the person
     * 
     * @return the liked responses from the person
     */
    public String[] getLiked() {

        return liked;
    }


    /**
     * Gets the hobby of person
     * 
     * @return hobby
     */
    public HobbyEnum getHobby() {
        return hobby;
    }


    /**
     * Gets the major of the person
     * 
     * @return major
     */
    public MajorEnum getMajor() {
        return major;
    }


    /**
     * Gets the state where the person is from
     * 
     * @return state
     */
    public RegionEnum getState() {
        return region;
    }


    /**
     * Strings together hobby, major, and state of the person
     * 
     * @return toString of person
     */
    public String toString() {
        StringBuilder personString = new StringBuilder("[Major: ");
        switch (this.getMajor()) {

            case COMPSCI:
                personString.append("Computer Science");
                break;

            case MATH:
                personString.append("Math or CMDA");
                break;

            case ENGINEERING:
                personString.append("Other Engineering");
                break;

            default:
                personString.append("Other");
                break;
        }
        personString.append(", Hobby: ");

        switch (this.getHobby()) {

            case READING:
                personString.append("reading");
                break;

            case SPORTS:
                personString.append("sports");
                break;

            case MUSIC:
                personString.append("music");
                break;

            default:
                personString.append("art");
                break;
        }
        personString.append(", Region: ");

        switch (this.getState()) {

            case NORTHEAST:
                personString.append("Northeast");
                break;

            case SOUTHEAST:
                personString.append("Southeast");
                break;

            case USOTHER:
                personString.append("United States (other than Southeast or "
                    + "Northwest)");
                break;

            default:
                personString.append("Outside of United States");
                break;
        }
        personString.append("]");
        return personString.toString();
    }


    /**
     * Two people are equal if same characteristics
     * 
     * @param obj
     *            the person to compare to
     * @return true if two objects are equal
     */
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        // Must be in the same class
        if (this.getClass() != obj.getClass()) {
            return false;
        }
        Person other = (Person)obj;
        return getHobby().equals(other.getHobby()) && getMajor().equals(other
            .getMajor()) && getState().equals(other.getState());
    }
}
