/**
 * 
 */
package prj5;

import java.awt.Color;
import CS2114.TextShape;
import CS2114.Window;
import CS2114.Shape;

/**
 * Creates the glyph for the GUIWindow
 * 
 * @author ndanni4
 * @author kbenson8
 * @author pims617
 * @version 4.16.2017
 *
 */
public class GUISongGlyph {
    public static final Color[] colors = new Color[] { Color.magenta,
        Color.blue, Color.orange, Color.green };


    /**
     * Method that creates the song glyphs
     * 
     * @param x
     *            - x coordinate
     * @param y
     *            - y coordinate
     * @param width
     *            - width of the glyph
     * @param height
     *            - height of the glyph
     * @param song
     *            - the song
     * @param breakdown
     *            - subdivisions of the category (hobby, major, region)
     * @param addTo
     *            - window that the method adds to
     */
    public GUISongGlyph(
        int x,
        int y,
        Song song,
        int width,
        int height,
        RepresentationEnum breakdown,
        Window addTo) {

        int availableSpace = height / 6;
        int middle = width / 2;

        String artist = "by :" + song.getArtist();
        String title = song.getTitle();

        System.out.println(title);

        TextShape titleShape = new TextShape(x, y, title);

        titleShape.setX(Math.max(0, x + middle - titleShape.getWidth() / 2));
        System.out.println(x + middle - titleShape.getWidth() / 2);
        TextShape artistShape = new TextShape(x, y + availableSpace, artist);
        artistShape.setX(Math.max(0, x + middle - artistShape.getWidth() / 2));

        titleShape.setBackgroundColor(Color.WHITE);
        artistShape.setBackgroundColor(Color.WHITE);

        addTo.addShape(titleShape);
        addTo.addShape(artistShape);
        y += 5;
        addTo.addShape(new Shape(x + middle - 2, y + availableSpace * 2, 4,
            availableSpace * 4, Color.BLACK));

        if (breakdown == RepresentationEnum.HOBBY) {
            for (int i = 0; i <= 3; i++) {
                Shape likedBar = new Shape(x + middle, y + (2 + i)
                    * availableSpace, (int)song.getPercent(true)[i],
                    availableSpace, colors[i]);
                addTo.addShape(likedBar);
            }

            for (int i = 0; i <= 3; i++) {
                Shape heardBar = new Shape(x + middle - (int)song.getPercent(
                    false)[i], y + (2 + i) * availableSpace, (int)song
                        .getPercent(false)[i], availableSpace, colors[i]);
                addTo.addShape(heardBar);
            }
        }

        if (breakdown == RepresentationEnum.MAJOR) {
            for (int i = 0; i <= 3; i++) {
                Shape likedBar = new Shape(x + middle, y + (2 + i)
                    * availableSpace, (int)song.getPercent(true)[i + 4],
                    availableSpace, colors[i]);
                addTo.addShape(likedBar);
            }

            for (int i = 0; i <= 3; i++) {
                Shape heardBar = new Shape(x + middle - (int)song.getPercent(
                    false)[i + 4], y + (2 + i) * availableSpace, (int)song
                        .getPercent(false)[i + 4], availableSpace, colors[i]);
                addTo.addShape(heardBar);
            }
        }

        if (breakdown == RepresentationEnum.REGION) {
            for (int i = 0; i <= 3; i++) {
                Shape likedBar = new Shape(x + middle, y + (2 + i)
                    * availableSpace, (int)song.getPercent(true)[i + 8],
                    availableSpace, colors[i]);
                addTo.addShape(likedBar);
            }

            for (int i = 0; i <= 3; i++) {
                Shape heardBar = new Shape(x + middle - (int)song.getPercent(
                    false)[i + 8], y + (2 + i) * availableSpace, (int)song
                        .getPercent(false)[i + 8], availableSpace, colors[i]);
                addTo.addShape(heardBar);
            }
        }

    }
}
