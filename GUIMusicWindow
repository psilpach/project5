/**
 * 
 */
package prj5;

import java.awt.Color;
import CS2114.Button;
import CS2114.Shape;
import CS2114.TextShape;
import CS2114.Window;
import CS2114.WindowSide;

/**
 * Display window for music
 * 
 * @author ndanni4
 * @version 4.15.2017
 *
 */
public class GUIMusicWindow {
    private Window myWindow;
    private SongList songs;
    int startingPosition = 0;
    RepresentationEnum breakdown;


    /**
     * Constructor for the MusicWindow
     */
    public GUIMusicWindow(SongList songs) {
        myWindow = new Window();
        myWindow.setSize(900, 500);
        myWindow.setTitle("Project 5");

        addButton("<- Prev", "clickedPrev", WindowSide.NORTH);
        addButton("Sort by Artist Name", "clickedSortArtist", WindowSide.NORTH);
        addButton("Sort by Song Title", "clickedSortTitle", WindowSide.NORTH);
        addButton("Sort by Release Year", "clickedSortRelease",
            WindowSide.NORTH);
        addButton("Sort by Genre", "clickedSortGenre", WindowSide.NORTH);
        addButton("Next ->", "clickedNext", WindowSide.NORTH);

        addButton("Represent Hobby", "clickedHobby", WindowSide.SOUTH);
        addButton("Represent Major", "clickedMajor", WindowSide.SOUTH);
        addButton("Represent Region", "clickedRegion", WindowSide.SOUTH);
        addButton("Quit", "clickedQuit", WindowSide.SOUTH);

        makeLegend(RepresentationEnum.HOBBY);

    }


    /**
     * Method that displays the song information on the window
     */
    public void displaySongs() {
        myWindow.removeAllShapes();

        int eachGlyphHeight = myWindow.getGraphPanelHeight() / 4;
        int eachGlyphWidth = myWindow.getGraphPanelWidth() / 4;

        int padding = eachGlyphHeight / 5;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++) {
                int song = startingPosition + j + 3 * i;
                if (song < songs.getLength())
                    new GUISongGlyph(padding + i * eachGlyphWidth, ((j + 1)
                        * padding) + j * eachGlyphHeight, songs.getEntry(song),
                        eachGlyphWidth, eachGlyphHeight, breakdown, myWindow);
            }

    }


    /**
     * Method that creates and adds all the buttons to the window
     * 
     * @param buttonTitle
     *            - name of the button
     * @param clickMethod
     *            - what the button does
     * @param side
     *            - where the button is located
     */
    public void addButton(
        String buttonTitle,
        String clickMethod,
        WindowSide side) {
        Button b = new Button(buttonTitle);
        b.onClick(this, clickMethod);
        b.setTitle(buttonTitle);
        myWindow.addButton(b, side);
    }


    /**
     * Getter method for the window display
     * 
     * @return the window
     */
    public Window getWindow() {
        return myWindow;
    }


    /**
     * Button that returns to the previous page
     * 
     * @param in
     *            - Clicked Previous button
     */
    public void clickedPrev(Button in) {
        if (startingPosition == 0) {
            return;
        }

        if (startingPosition > 9) {
            startingPosition -= 9;
        }
        displaySongs();
    }


    /**
     * Button that sorts the information according to artist in alphabetical
     * order
     * 
     * @param in
     *            - Sort Artist button
     */
    public void clickedSortArtist(Button in) {
        songs.sort("Artist");
        displaySongs();

    }


    /**
     * Button that sorts the information according to the song title in
     * alphabetical order
     * 
     * @param in
     *            - Sort Title button
     */
    public void clickedSortTitle(Button in) {
        songs.sort("Title");
        displaySongs();
    }


    /**
     * Button that sorts the information according to the release date from
     * oldest to newest
     * 
     * @param in
     *            - Sort by Date button
     */
    public void clickedSortRelease(Button in) {
        songs.sort("Release");
        displaySongs();
    }


    /**
     * Button that sorts the information according to the the genre of the song
     * in alphabetical order
     * 
     * @param in
     *            - Sort Genre button
     */
    public void clickedSortGenre(Button in) {
        songs.sort("Genre");
        displaySongs();
    }


    /**
     * Button that goes to the next page of songs
     * 
     * @param in
     *            - Next button
     */
    public void clickedNext(Button in) {
        if (startingPosition < songs.getLength() - 9) {
            startingPosition += 9;
        }
        displaySongs();
    }


    /**
     * Method that changes the glyphs according to the hobby
     * 
     * @param in
     *            - Clicked Hobby button
     */
    public void clickedHobby(Button in) {

        makeLegend(RepresentationEnum.HOBBY);
        displaySongs();
    }


    /**
     * Method that changes the glyphs according to the major
     * 
     * @param in
     *            - Clicked Major button
     */
    public void clickedMajor(Button in) {

        makeLegend(RepresentationEnum.MAJOR);
        displaySongs();
    }


    /**
     * Method that changes the glyphs according to the region
     * 
     * @param in
     *            - Clicked Region button
     */
    public void clickedRegion(Button in) {

        makeLegend(RepresentationEnum.REGION);
        displaySongs();
        // Possibly how to do the region
// for (int i = 0; i < songList.getLength(); i++) {
//
// songList.getEntry(i).representRegion();
// }
    }


    /**
     * Method that exits the window
     * 
     * @param in
     *            - Quit Button
     */
    public void clickedQuit(Button in) {
        System.exit(0);
    }


    /**
     * Creates the legend for the window
     */
    public void makeLegend(RepresentationEnum breakdown) {
        int x = (myWindow.getGraphPanelWidth() / 2) + 250;
        int y = (myWindow.getGraphPanelHeight() / 2) + 20;
        Shape legend = new Shape(x + 20, y, 130, 150, Color.WHITE);
        legend.setForegroundColor(Color.BLACK);

        if (breakdown == RepresentationEnum.HOBBY) {
            TextShape legendText = new TextShape(x + 40, y + 5, "Hobby Legend");
            TextShape firstText = new TextShape(x + 40, y + 20, "Read");
            TextShape secondText = new TextShape(x + 40, y + 35, "Art");
            TextShape thirdText = new TextShape(x + 40, y + 50, "Sports");
            TextShape fourthText = new TextShape(x + 40, y + 65, "Music");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            myWindow.addShape(legendText);
            myWindow.addShape(firstText);
            myWindow.addShape(secondText);
            myWindow.addShape(thirdText);
            myWindow.addShape(fourthText);
        }
        else if (breakdown == RepresentationEnum.MAJOR) {

            TextShape legendText = new TextShape(x + 40, y + 5, "Major Legend");
            TextShape firstText = new TextShape(x + 40, y + 20, "Comp Sci");
            TextShape secondText = new TextShape(x + 40, y + 35, "Other Eng");
            TextShape thirdText = new TextShape(x + 40, y + 50, "Math/CMDA");
            TextShape fourthText = new TextShape(x + 40, y + 65, "Other");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            myWindow.addShape(legendText);
            myWindow.addShape(firstText);
            myWindow.addShape(secondText);
            myWindow.addShape(thirdText);
            myWindow.addShape(fourthText);
        }
        else if (breakdown == RepresentationEnum.REGION) {

            TextShape legendText = new TextShape(x + 40, y + 5,
                "Region Legend");
            TextShape firstText = new TextShape(x + 40, y + 20, "Northeast");
            TextShape secondText = new TextShape(x + 40, y + 35, "Southeast");
            TextShape thirdText = new TextShape(x + 40, y + 50, "US Other");
            TextShape fourthText = new TextShape(x + 40, y + 65, "Outside US");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            myWindow.addShape(legendText);
            myWindow.addShape(firstText);
            myWindow.addShape(secondText);
            myWindow.addShape(thirdText);
            myWindow.addShape(fourthText);
        }
        else {
            throw new IllegalStateException();
        }

        TextShape songTitle = new TextShape(x + 45, y + 95, "Song Title");
        TextShape heardText = new TextShape(x + 30, y + 110, "Heard");
        TextShape likedText = new TextShape(x + 100, y + 110, "Liked");
        Shape legendDivider = new Shape(x + 80, y + 110, 5, 40, Color.BLACK);

        songTitle.setBackgroundColor(Color.WHITE);
        heardText.setBackgroundColor(Color.WHITE);
        likedText.setBackgroundColor(Color.WHITE);

        myWindow.addShape(songTitle);
        myWindow.addShape(heardText);
        myWindow.addShape(legendDivider);
        myWindow.addShape(likedText);
        myWindow.addShape(legend);
        myWindow.moveToBack(legend);

    }
}
