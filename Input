package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Input {
    /**
     * Creates a new ListReader() that reads from a given file
     * 
     * @param personFile
     *            The name of the file with person data
     * @param songFile
     *            The name of the file with song data
     */
    public Input(String personFile, String songFile) {

        SongList musicList = readDataFiles(personFile, songFile);
        new GUIMusicWindow(musicList);
    }

    /**
     * Reads the data from two
     * 
     * @param personFile
     *            The name of the file with person data
     * @param songFile
     *            The name of the file with song data
     * @return the read file as a DataList
     */
    public SongList readDataFiles(String personFile, String songFile) {

        SongList dataFile = new SongList();

        // scans person file
        readPeople(personFile, dataFile);

        // scans song file
        readSongs(songFile, dataFile);

        return dataFile;
    }

    /**
     * Reads the people in the file with the Person data
     * 
     * @param personFile
     *            The name of the file with the Person data
     * @param dataFile
     *            The DataList where the Songs are being added
     */
    private void readPeople(String personFile, SongList dataFile) {

        Scanner fileScan = null;
        try {

            fileScan = new Scanner(new File(personFile));
        }
        catch (FileNotFoundException exception) {

            System.out.println(exception.getMessage());
            System.exit(0);
        }

        fileScan.nextLine(); // advances past the first line

        while (fileScan.hasNextLine()) {
            String personLine = fileScan.nextLine();
            String[] personData = personLine.split(" *, *",100);
            if (personData.length > 2 && !personData[4].equals("")) {

                MajorEnum major = findMajor(personData[2]);
                RegionEnum region = findRegion(personData[3]);
                HobbyEnum hobby = findHobby(personData[4]);
                int numSongs = (personData.length - 5) / 2;
                String[] heard = new String[numSongs];
                String[] liked = new String[numSongs];
                int index = 0;

                for (int i = 5; i < personData.length - 1; i += 2) {

                    heard[index] = personData[i];
                    liked[index] = personData[i + 1];
                    index++;
                }
                dataFile.addPerson(
                        new Person(hobby, major, region, heard, liked));
            }
        }

        fileScan.close();
    }

    /**
     * Reads the Songs in the file with all the Song data
     * 
     * @param songFile
     *            The name of the file with the Song data
     * @param dataFile
     *            The DataList where the Songs are being added
     */
    private void readSongs(String songFile, SongList dataFile) {

        Scanner fileScan = null;
        try {

            fileScan = new Scanner(new File(songFile));
        }
        catch (FileNotFoundException exception) {

            System.out.println(exception.getMessage());
            System.exit(0);
        }

        fileScan.nextLine();
        int index = 0;

        while (fileScan.hasNextLine()) {
            String songLine = fileScan.nextLine();
            String[] songData = songLine.split(" *, *",100);
            String title = songData[0];
            String artist = songData[1];
            String year = songData[2];
            String genre = songData[3];

            dataFile.add(new Song(genre, artist, title, year));
            index++;
        }

        fileScan.close();
    }

    /**
     * Method finds the corresponding enum of the input String for the Person's
     * major
     * 
     * @param major
     *            The String with the Person's major
     * @return the corresponding enum of the String
     */
    private MajorEnum findMajor(String major) {
        MajorEnum majorEnum = null;
        switch (major) {

        case "Computer Science":
            majorEnum = MajorEnum.COMPSCI;
            break;

        case "Math or CMDA":
            majorEnum = MajorEnum.MATH;
            break;

        case "Other Engineering":
            majorEnum = MajorEnum.ENGINEERING;
            break;

        default:
            majorEnum = MajorEnum.OTHER;
            break;
        }
        return majorEnum;
    }

    /**
     * Method finds the corresponding enum of the input String for the Person's
     * region
     * 
     * @param region
     *            The String with the Person's region
     * @return the corresponding enum of the String
     */
    private RegionEnum findRegion(String region) {

        RegionEnum regionEnum = null;
        switch (region) {

        case "Southeast":
            regionEnum = RegionEnum.SOUTHEAST;
            break;

        case "Northeast":
            regionEnum = RegionEnum.NORTHEAST;
            break;

        case "United States (other than Southeast or Northwest)":
            regionEnum = RegionEnum.USOTHER;
            break;

        default:
            regionEnum = RegionEnum.OTHER;
            break;
        }
        return regionEnum;
    }

    /**
     * Method finds the corresponding enum of the input String for the Person's
     * hobby
     * 
     * @param hobby
     *            The String with the Person's hobby
     * @return the corresponding enum of the String
     */
    private HobbyEnum findHobby(String hobby) {

        HobbyEnum hobbyEnum = null;
        switch (hobby) {

        case "sports":
            hobbyEnum = HobbyEnum.SPORTS;
            break;

        case "music":
            hobbyEnum = HobbyEnum.MUSIC;
            break;

        case "reading":
            hobbyEnum = HobbyEnum.READING;
            break;

        default:
            hobbyEnum = HobbyEnum.ART;
            break;
        }
        return hobbyEnum;
    }
    
    /**
     * main() method runs the program
     * @param args    the supplied command-line arguments
     *                as an array of String objects
     */
    public static void main(String[] args) {
        
        if (args.length == 2) {
            
            new Input(args[0], args[1]);
        }
        else {
            
            new Input("MusicSurveyData2017S.csv", "SongList2017S.csv");
        }
    }
}
