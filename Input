package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * 
 * @author ndanni4
 * @version 4.19.2017
 *
 */
public class Input {
    private static SongList musicList;


    /**
     * Creates a new ListReader() that reads from a given file
     * 
     * @param personFile
     *            The name of the file with person data
     * @param songFile
     *            The name of the file with song data
     */
    public Input(String personFile, String songFile) {

        musicList = readDataFiles(personFile, songFile);
        new GUIMusicWindow(musicList);
    }


    public static SongList getMusicList() {
        return musicList;
    }


    /**
     * Reads the data from two
     * 
     * @param personFile
     *            The name of the file with person data
     * @param songFile
     *            The name of the file with song data
     * @return the read file as a DataList
     */
    public SongList readDataFiles(String personFile, String songFile) {

        SongList dataFile = new SongList();

        // scans person file
        readPeople(personFile, dataFile);

        // scans song file
        readSongs(songFile, dataFile);

        return dataFile;
    }


    /**
     * Reads the people in the file with the Person data
     * 
     * @param personFile
     *            The name of the file with the Person data
     * @param dataFile
     *            The DataList where the Songs are being added
     */
    private void readPeople(String personFile, SongList dataFile) {

        Scanner fileScan = null;
        try {

            fileScan = new Scanner(new File(personFile));
        }
        catch (FileNotFoundException exception) {

            System.out.println(exception.getMessage());
            System.exit(0);
        }

        fileScan.nextLine(); // advances past the first line

        while (fileScan.hasNextLine()) {
            String personLine = fileScan.nextLine();
            String[] personData = personLine.split(" *, *", 100);
            if (personData.length > 2 && !personData[4].equals("")) {

                MajorEnum major = findMajor(personData[2]);
                RegionEnum region = findRegion(personData[3]);
                HobbyEnum hobby = findHobby(personData[4]);
                int numSongs = (personData.length - 5) / 2;
                String[] heard = new String[numSongs];
                String[] liked = new String[numSongs];
                int index = 0;

                for (int i = 5; i < personData.length - 1; i += 2) {

                    heard[index] = personData[i];
                    liked[index] = personData[i + 1];
                    index++;
                }
                dataFile.addPerson(new Person(hobby, major, region, heard,
                    liked));
            }
        }

        fileScan.close();
    }


    /**
     * Reads the Songs in the file with all the Song data
     * 
     * @param songFile
     *            The name of the file with the Song data
     * @param dataFile
     *            The DataList where the Songs are being added
     */
    private void readSongs(String songFile, SongList dataFile) {

        Scanner fileScan = null;
        try {

            fileScan = new Scanner(new File(songFile));
        }
        catch (FileNotFoundException exception) {

            System.out.println(exception.getMessage());
            System.exit(0);
        }

        fileScan.nextLine();
        int index = 0;

        while (fileScan.hasNextLine()) {
            String songLine = fileScan.nextLine();
            String[] songData = songLine.split(" *, *", 100);
            String title = songData[0];
            String artist = songData[1];
            String year = songData[2];
            String genre = songData[3];

            dataFile.add(new Song(title, artist, genre, year));
            index++;
        }

        fileScan.close();
    }


    /**
     * Method finds the corresponding enum of the input String for the Person's
     * major
     * 
     * @param major
     *            The String with the Person's major
     * @return the corresponding enum of the String
     */
    private MajorEnum findMajor(String major) {
        MajorEnum majorEnum = null;
        switch (major) {

            case "Computer Science":
                majorEnum = MajorEnum.COMPSCI;
                break;

            case "Math or CMDA":
                majorEnum = MajorEnum.MATH;
                break;

            case "Other Engineering":
                majorEnum = MajorEnum.ENGINEERING;
                break;

            default:
                majorEnum = MajorEnum.OTHER;
                break;
        }
        return majorEnum;
    }





*******************************************************************************





/**
 * 
 */
package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import list.AList;

/**
 * Input class
 * @author Christopher Jurgens
 * @author Kevin Ryan
 * @author Michael Han
 * @version 4.18.2017
 */
public class Input {

    private static String[] data;
    private static LinkedList<Person> personList;
    private static LinkedList<Song> songList;
    
    /**
     * The Main Method
     * @param args the arguments to be passed in
     */
    public static void main(String[] args) {
        data = new String[2];
        data[0] = args[0]; //The first argument is the music survey data
        data[1] = args[1]; //The second argument is the song data
        
        personList = new LinkedList<>();
        songList = new LinkedList<>();
        readSongs(data[1]);
        readSurvey(data[0]);
        
        new GUI(personList, songList);
        
        printOutput();
    }
    
    /**
     * Returns the LinkedList containing all of the people in the survey
     * 
     * @return the LinkedList containing all of the people in the survey
     */
    public LinkedList<Person> getPeopleList() {
        return personList;
    }


    /**
     * Returns the LinkedList containing all of the songs
     * 
     * @return the LinkedList containing all of the songs
     */
    public LinkedList<Song> getSongList() {
        return songList;
    }


    /**
     * Reads the data from the survey into the list, will create new Person
     * objects and place them in personList
     * 
     * @param survey
     *            the string containing the survey data.
     */
    public static void readSurvey(String surveyData) {
        try {
            @SuppressWarnings("resource")
            Scanner survey = new Scanner(new File(surveyData));
            survey.nextLine(); // skips the first line because it looks like that contains headers which we don't want
            while (survey.hasNextLine()) {
                // Stores each line in a String variable to be analyzed
                String line = survey.nextLine();
                if (line.split(",").length >= 5) {
                    personList.add(new Person(line.split(","), songList));
                }
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
            System.exit(0);
        }
    }


    /**
     * Reads the songs into the list of songs, will create new Song objects and
     * place them in songList
     * 
     * @param songs
     *            the string containing the songs
     */
    public static void readSongs(String songs) {
        try {
            @SuppressWarnings("resource")
            Scanner survey = new Scanner(new File(songs));
            survey.nextLine(); // skips the first line because it looks like that contains headers which we don't want
            while (survey.hasNextLine()) {
                // Stores each line in a String variable to be analyzed
                String line = survey.nextLine();
                songList.add(new Song(line.split(",")));
            }
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
            System.exit(0);
        }
    }
    
    /**
     * Sorts the songs according the the parameter
     * @param sortBy the method to sort the songs list by.
     */
    public static void sortSongs(String sortBy) {
        if ("Artist Name".equals(sortBy)) {
            sortByArtist();
        }
        
        if ("Song Title".equals(sortBy)) {
            sortByTitle();
        }
        
        if ("Release Year".equals(sortBy)) {
            sortyByYear();
        }
        
        if ("Genre".equals(sortBy)) {
            sortByGenre();
        }
    }

    /**
     * Sorts by Genre
     */
    private static void sortByGenre() {
        ArrayList<Song> list = new ArrayList<Song>();
        for (int i = 0; i < songList.size(); i++) {
            list.add(songList.get(i));
        }
        Collections.sort(list, new ComparatorGenre());
        
        songList.clear();
        
        for (int i = 0; i < list.size(); i++) {
            songList.add(list.get(i));
        }
    }

    /**
     * Sorts by Year
     */
    private static void sortyByYear() {
        // TODO Auto-generated method stub
    }

    /**
     * Sorts by Title
     */
    private static void sortByTitle() {
        ArrayList<Song> list = new ArrayList<Song>();
        for (int i = 0; i < songList.size(); i++) {
            list.add(songList.get(i));
        }
        Collections.sort(list, new ComparatorTitle());
        
        songList.clear();
        
        for (int i = 0; i < list.size(); i++) {
            songList.add(list.get(i));
        }
    }

    /**
     * Sorts by Artist
     */
    private static void sortByArtist() {
        // TODO Auto-generated method stub  
    }
    
    /**
     * Prints out the glyphs of songs
     */
    public static void printOutput() {
        sortSongs("Genre");
        for (Song song : songList) {
            Glyph glyph = new Glyph(personList, "Hobby", song);
            System.out.println(glyph.toString());
        }
        sortSongs("Song Title");
        for (Song song : songList) {
            Glyph glyph = new Glyph(personList, "Hobby", song);
            System.out.println(glyph.toString());
        }   
    }
}


























    /**
     * Method finds the corresponding enum of the input String for the Person's
     * region
     * 
     * @param region
     *            The String with the Person's region
     * @return the corresponding enum of the String
     */
    private RegionEnum findRegion(String region) {

        RegionEnum regionEnum = null;
        switch (region) {

            case "Southeast":
                regionEnum = RegionEnum.SOUTHEAST;
                break;

            case "Northeast":
                regionEnum = RegionEnum.NORTHEAST;
                break;

            case "United States (other than Southeast or Northwest)":
                regionEnum = RegionEnum.USOTHER;
                break;

            default:
                regionEnum = RegionEnum.OTHER;
                break;
        }
        return regionEnum;
    }


    /**
     * Method finds the corresponding enum of the input String for the Person's
     * hobby
     * 
     * @param hobby
     *            The String with the Person's hobby
     * @return the corresponding enum of the String
     */
    private HobbyEnum findHobby(String hobby) {

        HobbyEnum hobbyEnum = null;
        switch (hobby) {

            case "sports":
                hobbyEnum = HobbyEnum.SPORTS;
                break;

            case "music":
                hobbyEnum = HobbyEnum.MUSIC;
                break;

            case "reading":
                hobbyEnum = HobbyEnum.READING;
                break;

            default:
                hobbyEnum = HobbyEnum.ART;
                break;
        }
        return hobbyEnum;
    }


    /**
     * main() method runs the program
     * 
     * @param args
     *            the supplied command-line arguments
     *            as an array of String objects
     */
    public static void main(String[] args) {

        Input input;
        if (args.length == 2) {

            input = new Input(args[0], args[1]);
        }
        else {

            input = new Input("MusicSurveyData2017S.csv", "SongList2017S.csv");

        }

        for (int i = 0; i < musicList.getLength(); i++) {
            System.out.println(musicList.get(i).toString());
        }

    }
}
