package prj5;

// import static org.junit.Assert.*;

/**
 * Test class for the Person class
 * 
 * @author ndanni4
 * @author kbenson8
 * @version 4.10.2017
 *
 */
public class PersonTest extends student.TestCase {

    private Person person1;
    private String[] likedTest = { "yes", "yes", "no", "no" };
    private String[] heardTest = { "yes", "yes", "no", "no" };
    private Person person2;
    private Person person3;
    private Person person4;


    /**
     * Runs before each test sets up people
     */
    public void setUp() {
        person1 = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        person2 = new Person(HobbyEnum.MUSIC, MajorEnum.MATH,
            RegionEnum.SOUTHEAST, likedTest, heardTest);
        person3 = new Person(HobbyEnum.SPORTS, MajorEnum.ENGINEERING,
            RegionEnum.USOTHER, likedTest, heardTest);
        person4 = new Person(HobbyEnum.READING, MajorEnum.OTHER,
            RegionEnum.OTHER, likedTest, heardTest);
    }


    /**
     * Test to make sure the correct hobby is output
     */
    public void testGetHobby() {
        assertEquals(HobbyEnum.ART, person1.getHobby());
        assertEquals(HobbyEnum.MUSIC, person2.getHobby());
        assertEquals(HobbyEnum.SPORTS, person3.getHobby());
        assertEquals(HobbyEnum.READING, person4.getHobby());
    }


    /**
     * Test to make sure the correct major is output
     */
    public void testGetMajor() {
        assertEquals(MajorEnum.COMPSCI, person1.getMajor());
        assertEquals(MajorEnum.MATH, person2.getMajor());
        assertEquals(MajorEnum.ENGINEERING, person3.getMajor());
        assertEquals(MajorEnum.OTHER, person4.getMajor());
    }


    /**
     * Test to make sure the correct state is output
     */
    public void testGetState() {
        assertEquals(RegionEnum.NORTHEAST, person1.getState());
        assertEquals(RegionEnum.SOUTHEAST, person2.getState());
        assertEquals(RegionEnum.USOTHER, person3.getState());
        assertEquals(RegionEnum.OTHER, person4.getState());
    }


    /**
     * Test to make sure the correct string is output
     */
    public void testToString() {
        assertEquals("[Major: Computer Science, Hobby: art, Region: Northeast]",
            person1.toString());
        assertEquals("[Major: Math or CMDA, Hobby: music, Region: Southeast]",
            person2.toString());
        assertEquals(
            "[Major: Other Engineering, Hobby: sports, Region: United States "
                + "(other than Southeast or Northwest)]", person3.toString());
        assertEquals(
            "[Major: Other, Hobby: reading, Region: Outside of United States]",
            person4.toString());

        Person person5 = new Person(HobbyEnum.READING, MajorEnum.MATH,
            RegionEnum.SOUTHEAST, likedTest, heardTest);
        assertEquals("[Major: Math or CMDA, Hobby: reading, Region: Southeast]",
            person5.toString());

        Person person6 = new Person(HobbyEnum.SPORTS, MajorEnum.ENGINEERING,
            RegionEnum.USOTHER, likedTest, heardTest);
        assertEquals(
            "[Major: Other Engineering, Hobby: sports, Region: United States "
                + "(other than Southeast or Northwest)]", person6.toString());

        Person person7 = new Person(HobbyEnum.MUSIC, MajorEnum.OTHER,
            RegionEnum.OTHER, likedTest, heardTest);
        assertEquals("[Major: Other, Hobby: music, Region: Outside of "
            + "United States]", person7.toString());
    }


    /**
     * Test to make sure only identical people
     * Are considered equals
     */
    public void testEquals() {
        Person kevin2 = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        Person kevin3 = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.SOUTHEAST, likedTest, heardTest);
        Person kevin4 = new Person(HobbyEnum.ART, MajorEnum.OTHER,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        Person notEqual = null;
        assertTrue(person1.equals(person1));
        assertFalse(person1.equals(person2));
        assertFalse(person1.equals(notEqual));
        assertFalse(person1.equals(kevin3));
        assertFalse(person1.equals(kevin4));
        assertTrue(person1.equals(kevin2));
        assertFalse(person1.equals(5));
    }

}
