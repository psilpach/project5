package prj5;

import static org.junit.Assert.*;

/**
 * Test class for the Person class
 * 
 * @author ndanni4
 * @version 4.10.2017
 *
 */
public class PersonTest extends student.TestCase {

    private Person kevin;
    private String[] likedTest = { "yes", "yes", "no", "no" };
    private String[] heardTest = { "yes", "yes", "no", "no" };
    private Person pim;
    private Person danni;


    /**
     * Runs before each test sets up people
     */
    public void setUp() {
        kevin = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        pim = new Person(HobbyEnum.MUSIC, MajorEnum.MATH, RegionEnum.NORTHEAST,
            likedTest, heardTest);
        danni = new Person(HobbyEnum.SPORTS, MajorEnum.OTHER,
            RegionEnum.NORTHEAST, likedTest, heardTest);
    }


    /**
     * Test to make sure the correct hobby is output
     */
    public void testGetHobby() {
        assertEquals("ART", kevin.getHobby().toString());
        assertEquals("SPORTS", danni.getHobby().toString());
    }


    /**
     * Test to make sure the correct major is output
     */
    public void testGetMajor() {
        assertEquals("COMPSCI", kevin.getMajor().toString());
        assertEquals("OTHER", danni.getMajor().toString());
    }


    /**
     * Test to make sure the correct state is output
     */
    public void testGetState() {
        assertEquals("NORTHEAST", kevin.getState().toString());
        assertEquals("NORTHEAST", pim.getState().toString());
    }


    /**
     * Test to make sure the correct string is output
     */
    public void testToString() {
        assertEquals("[Major: Computer Science, Hobby: art, Region: Northeast]",
            kevin.toString());
    }


    /**
     * Test to make sure only identical people
     * Are considered equals
     */
    public void testEquals() {
        Person kevin2 = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        Person kevin3 = new Person(HobbyEnum.ART, MajorEnum.COMPSCI,
            RegionEnum.SOUTHEAST, likedTest, heardTest);
        Person kevin4 = new Person(HobbyEnum.ART, MajorEnum.OTHER,
            RegionEnum.NORTHEAST, likedTest, heardTest);
        Person notEqual = null;
        assertTrue(kevin.equals(kevin));
        assertFalse(kevin.equals(danni));
        assertFalse(kevin.equals(notEqual));
        assertFalse(kevin.equals(kevin3));
        assertFalse(kevin.equals(kevin4));
        assertTrue(kevin.equals(kevin2));
        assertFalse(kevin.equals(5));
    }

}
