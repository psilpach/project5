package prj5;

import java.util.ArrayList;

/**
 * Song class for the music visualization
 * 
 * @author Pim Silpacharn pims617
 * @author Danni Nicholls ndanni4
 * @author Kevin Benson kbenson8
 * @version 4/16/17
 *
 */
public class Song {
    private int totalHeardRead = 0;
    private int totalHeardArt = 0;
    private int totalHeardSports = 0;
    private int totalHeardMusic = 0;

    private int totalHeardComp = 0;
    private int totalHeardEng = 0;
    private int totalHeardMath = 0;
    private int totalHeardOther = 0;

    private int totalHeardSouth = 0;
    private int totalHeardNorth = 0;
    private int totalHeardUs = 0;
    private int totalHeardNon = 0;

    private int totalLikeRead = 0;
    private int totalLikeArt = 0;
    private int totalLikeSports = 0;
    private int totalLikeMusic = 0;

    private int totalLikeComp = 0;
    private int totalLikeEng = 0;
    private int totalLikeMath = 0;
    private int totalLikeOther = 0;

    private int totalLikeSouth = 0;
    private int totalLikeNorth = 0;
    private int totalLikeUs = 0;
    private int totalLikeNon = 0;

    private String title;
    private String artist;
    private String genre;
    private String year;

    private int numHeardRead = 0;
    private int numHeardArt = 0;
    private int numHeardSports = 0;
    private int numHeardMusic = 0;

    private int numHeardComp = 0;
    private int numHeardEng = 0;
    private int numHeardMath = 0;
    private int numHeardOther = 0;

    private int numLikeSouth = 0;
    private int numLikeNorth = 0;
    private int numLikeUs = 0;
    private int numLikeNon = 0;

    private int numLikeRead = 0;
    private int numLikeArt = 0;
    private int numLikeSports = 0;
    private int numLikeMusic = 0;

    private int numLikeComp = 0;
    private int numLikeEng = 0;
    private int numLikeMath = 0;
    private int numLikeOther = 0;

    private int numHeardSouth = 0;
    private int numHeardNorth = 0;
    private int numHeardUs = 0;
    private int numHeardNon = 0;

    private ArrayList<Person> likeArray;
    private ArrayList<Person> heardArray;


    /**
     * Constructor for sogn that takes 4 parameters
     * 
     * @param title1
     *            title
     * @param artist1
     *            artist
     * @param year1
     *            year
     * @param genre1
     *            genre
     */
    public Song(String title1, String artist1, String genre1, String year1) {

        likeArray = new ArrayList<Person>();
        heardArray = new ArrayList<Person>();
        title = title1;
        artist = artist1;
        genre = genre1;
        year = year1;
    }


    /**
     * Getter for title
     * 
     * @return song's title
     */
    public String getTitle() {
        return title;
    }


    /**
     * Getter for artist
     * 
     * @return song's artist
     */
    public String getArtist() {
        return artist;
    }


    /**
     * Getter for genre
     * 
     * @return song's genre
     */
    public String getGenre() {
        return genre;
    }


    /**
     * Getter for year
     * 
     * @return song's release date
     */
    public String getYear() {
        return year;
    }


    /**
     * 
     * @return ArrayList of people who like the song
     */
    public ArrayList<Person> getLike() {
        return likeArray;
    }


    /**
     * 
     * @return ArrayList of people who have heard the song
     */
    public ArrayList<Person> getHeard() {
        return heardArray;
    }


    /**
     * Adds the number of heards to an array
     * 
     * @param p
     *            person that has heard the song
     * @param add
     *            true if person has heard it, false if not
     */
    public void addHeard(Person p, boolean add) {
        if (add) {
            heardArray.add(p);
        }

        HobbyEnum hob = p.getHobby();
        MajorEnum maj = p.getMajor();
        RegionEnum reg = p.getState();
        if (hob == HobbyEnum.READING) {
            if (add) {
                numHeardRead++;
            }
            totalHeardRead++;
        }
        else if (hob == HobbyEnum.ART) {
            if (add) {
                numHeardArt++;
            }
            totalHeardArt++;
        }
        else if (hob == HobbyEnum.SPORTS) {
            if (add) {
                numHeardSports++;
            }
            totalHeardSports++;
        }
        else if (hob == HobbyEnum.MUSIC) {
            if (add) {
                numHeardMusic++;
            }
            totalHeardMusic++;
        }
        if (maj == MajorEnum.COMPSCI) {
            if (add) {
                numHeardComp++;
            }
            totalHeardComp++;
        }
        else if (maj == MajorEnum.ENGINEERING) {
            if (add) {
                numHeardEng++;
            }
            totalHeardEng++;
        }
        else if (maj == MajorEnum.MATH) {
            if (add) {
                numHeardMath++;
            }
            totalHeardMath++;
        }
        else if (maj == MajorEnum.OTHER) {
            if (add) {
                numHeardOther++;
            }
            totalHeardOther++;
        }
        if (reg == RegionEnum.SOUTHEAST) {
            if (add) {
                numHeardSouth++;
            }
            totalHeardSouth++;
        }
        else if (reg == RegionEnum.NORTHEAST) {
            if (add) {
                numHeardNorth++;
            }
            totalHeardNorth++;
        }
        else if (reg == RegionEnum.USOTHER) {
            if (add) {
                numHeardUs++;
            }
            totalHeardUs++;
        }
        else if (reg == RegionEnum.OTHER) {
            if (add) {
                numHeardNon++;
            }
            totalHeardNon++;
        }
    }


    /**
     * Add the number of likes to an array
     * 
     * @param p
     *            person that likes the song
     * @param add
     *            true if person likes it, false if not
     * 
     */
    public void addLike(Person p, boolean add) {
        if (add) {
            likeArray.add(p);
        }

        HobbyEnum hob = p.getHobby();
        MajorEnum maj = p.getMajor();
        RegionEnum reg = p.getState();
        if (hob == HobbyEnum.READING) {
            if (add) {
                numLikeRead++;
            }
            totalLikeRead++;
        }
        else if (hob == HobbyEnum.ART) {
            if (add) {
                numLikeArt++;
            }
            totalLikeArt++;
        }
        else if (hob == HobbyEnum.SPORTS) {
            if (add) {
                numLikeSports++;
            }
            totalLikeSports++;
        }
        else if (hob == HobbyEnum.MUSIC) {
            if (add) {
                numLikeMusic++;
            }
            totalLikeMusic++;
        }
        if (maj == MajorEnum.COMPSCI) {
            if (add) {
                numLikeComp++;
            }
            totalLikeComp++;
        }
        else if (maj == MajorEnum.ENGINEERING) {
            if (add) {
                numLikeEng++;
            }
            totalLikeEng++;
        }
        else if (maj == MajorEnum.MATH) {
            if (add) {
                numLikeMath++;
            }
            totalLikeMath++;
        }
        else if (maj == MajorEnum.OTHER) {
            if (add) {
                numLikeOther++;
            }
            totalLikeOther++;
        }
        if (reg == RegionEnum.SOUTHEAST) {
            if (add) {
                numLikeSouth++;
            }
            totalLikeSouth++;
        }
        else if (reg == RegionEnum.NORTHEAST) {
            if (add) {
                numLikeNorth++;
            }
            totalLikeNorth++;
        }
        else if (reg == RegionEnum.USOTHER) {
            if (add) {
                numLikeUs++;
            }
            totalLikeUs++;
        }
        else if (reg == RegionEnum.OTHER) {
            if (add) {
                numLikeNon++;
            }
            totalLikeNon++;
        }
    }


    /**
     * Gets number of heard and puts into an array
     * 
     * @return int array of number of people who heard the song
     */
    public int[] getNumHeard() {
        int[] out = new int[12];
        for (int i = 0; i < 12; i++) {
            out[i] = 0;
        }
        for (int i = 0; i < heardArray.size(); i++) {
            if (heardArray.get(i).getHobby() == HobbyEnum.READING) {
                out[0]++;
            }
            else if (heardArray.get(i).getHobby() == HobbyEnum.ART) {
                out[1]++;
            }
            else if (heardArray.get(i).getHobby() == HobbyEnum.SPORTS) {
                out[2]++;
            }
            else if (heardArray.get(i).getHobby() == HobbyEnum.MUSIC) {
                out[3]++;
            }
            if (heardArray.get(i).getMajor() == MajorEnum.COMPSCI) {
                out[4]++;
            }
            else if (heardArray.get(i).getMajor() == MajorEnum.ENGINEERING) {
                out[5]++;
            }
            else if (heardArray.get(i).getMajor() == MajorEnum.MATH) {
                out[6]++;
            }
            else if (heardArray.get(i).getMajor() == MajorEnum.OTHER) {
                out[7]++;
            }
            if (heardArray.get(i).getState() == RegionEnum.SOUTHEAST) {
                out[8]++;
            }
            else if (heardArray.get(i).getState() == RegionEnum.NORTHEAST) {
                out[9]++;
            }
            else if (heardArray.get(i).getState() == RegionEnum.USOTHER) {
                out[10]++;
            }
            else if (heardArray.get(i).getState() == RegionEnum.OTHER) {
                out[11]++;
            }
        }
        return out;
    }


    /**
     * Gets the number of likes and puts into an array
     * 
     * @return int array of number of people who like the song
     */
    public int[] getNumLike() {
        int[] out = new int[12];
        for (int i = 0; i < 12; i++) {
            out[i] = 0;
        }
        for (int i = 0; i < likeArray.size(); i++) {
            if (likeArray.get(i).getHobby() == HobbyEnum.READING) {
                out[0]++;
            }
            else if (likeArray.get(i).getHobby() == HobbyEnum.ART) {
                out[1]++;
            }
            else if (likeArray.get(i).getHobby() == HobbyEnum.SPORTS) {
                out[2]++;
            }
            else if (likeArray.get(i).getHobby() == HobbyEnum.MUSIC) {
                out[3]++;
            }
            if (likeArray.get(i).getMajor() == MajorEnum.COMPSCI) {
                out[4]++;
            }
            else if (likeArray.get(i).getMajor() == MajorEnum.ENGINEERING) {
                out[5]++;
            }
            else if (likeArray.get(i).getMajor() == MajorEnum.MATH) {
                out[6]++;
            }
            else if (likeArray.get(i).getMajor() == MajorEnum.OTHER) {
                out[7]++;
            }
            if (likeArray.get(i).getState() == RegionEnum.SOUTHEAST) {
                out[8]++;
            }
            else if (likeArray.get(i).getState() == RegionEnum.NORTHEAST) {
                out[9]++;
            }
            else if (likeArray.get(i).getState() == RegionEnum.USOTHER) {
                out[10]++;
            }
            else if (likeArray.get(i).getState() == RegionEnum.OTHER) {
                out[11]++;
            }
        }
        return out;
    }


    /**
     * Gets the total number of heards in the song
     * 
     * @return int people who heard it
     */
    public int getTotalHeard() {
        return heardArray.size();
    }


    /**
     * Gets the total number of likes in the song
     * 
     * @return int people who like it
     */
    public int getTotalLikes() {
        return likeArray.size();
    }


    /**
     * Gets the percent of each sorting type
     * 
     * @param like
     *            true if like, false if heard
     * @return array of numbers of people who like/heard
     *         the song
     */
    public int[] getPercent(boolean like) {
        int[] out;
        if (like) {
            out = getNumLike();
            if (numLikeRead != 0) {
                out[0] = (int)(numLikeRead * 1.0 / totalLikeRead * 100.0);
            }
            else {
                out[0] = 0;
            }
            if (numLikeArt != 0) {
                out[1] = (int)(numLikeArt * 1.0 / totalLikeArt * 100.0);
            }
            else {
                out[1] = 0;
            }
            if (totalLikeSports != 0) {
                out[2] = (int)(numLikeSports * 1.0 / totalLikeSports * 100.0);
            }
            else {
                out[2] = 0;
            }
            if (numLikeMusic != 0) {
                out[3] = (int)(numLikeMusic * 1.0 / totalLikeMusic * 100.0);
            }
            else {
                out[3] = 0;
            }
            if (numLikeComp != 0) {
                out[4] = (int)(numLikeComp * 1.0 / totalLikeComp * 100.0);
            }
            else {
                out[4] = 0;
            }
            if (numLikeEng != 0) {
                out[5] = (int)(numLikeEng * 1.0 / totalLikeEng * 100.0);
            }
            else {
                out[5] = 0;
            }
            if (numLikeMath != 0) {
                out[6] = (int)(numLikeMath * 1.0 / totalLikeMath * 100.0);
            }
            else {
                out[6] = 0;
            }
            if (numLikeOther != 0) {
                out[7] = (int)(numLikeOther * 1.0 / totalLikeOther * 100.0);
            }
            else {
                out[7] = 0;
            }
            if (numLikeSouth != 0) {
                out[8] = (int)(numLikeSouth * 1.0 / totalLikeSouth * 100.0);
            }
            else {
                out[8] = 0;
            }
            if (numLikeNorth != 0) {
                out[9] = (int)(numLikeNorth * 1.0 / totalLikeNorth * 100.0);
            }
            else {
                out[9] = 0;
            }
            if (numLikeUs != 0) {
                out[10] = (int)(numLikeUs * 1.0 / totalLikeUs * 100.0);
            }
            else {
                out[10] = 0;
            }
            if (numLikeNon != 0) {
                out[11] = (int)(numLikeNon * 1.0 / totalLikeNon * 100.0);
            }
            else {
                out[11] = 0;
            }
        }
        else {
            out = getNumHeard();
            if (numHeardRead != 0) {
                out[0] = (int)(numHeardRead * 1.0 / totalHeardRead * 100.0);
            }
            else {
                out[0] = 0;
            }
            if (numHeardArt != 0) {
                out[1] = (int)(numHeardArt * 1.0 / totalHeardArt * 100.0);
            }
            else {
                out[1] = 0;
            }
            if (totalHeardSports != 0) {
                out[2] = (int)(numHeardSports * 1.0 / totalHeardSports * 100.0);
            }
            else {
                out[2] = 0;
            }
            if (numHeardMusic != 0) {
                out[3] = (int)(numHeardMusic * 1.0 / totalHeardMusic * 100.0);
            }
            else {
                out[3] = 0;
            }
            if (numHeardComp != 0) {
                out[4] = (int)(numHeardComp * 1.0 / totalHeardComp * 100.0);
            }
            else {
                out[4] = 0;
            }
            if (numHeardEng != 0) {
                out[5] = (int)(numHeardEng * 1.0 / totalHeardEng * 100.0);
            }
            else {
                out[5] = 0;
            }
            if (numHeardMath != 0) {
                out[6] = (int)(numHeardMath * 1.0 / totalHeardMath * 100.0);
            }
            else {
                out[6] = 0;
            }
            if (numHeardOther != 0) {
                out[7] = (int)(numHeardOther * 1.0 / totalHeardOther * 100.0);
            }
            else {
                out[7] = 0;
            }
            if (numHeardSouth != 0) {
                out[8] = (int)(numHeardSouth * 1.0 / totalHeardSouth * 100.0);
            }
            else {
                out[8] = 0;
            }
            if (numHeardNorth != 0) {
                out[9] = (int)(numHeardNorth * 1.0 / totalHeardNorth * 100.0);
            }
            else {
                out[9] = 0;
            }
            if (numHeardUs != 0) {
                out[10] = (int)(numHeardUs * 1.0 / totalHeardUs * 100.0);
            }
            else {
                out[10] = 0;
            }
            if (numHeardNon != 0) {
                out[11] = (int)(numHeardNon * 1.0 / totalHeardNon * 100.0);
            }
            else {
                out[11] = 0;
            }
        }

        return out;
    }


    /**
     * Outputs a to string for song
     * 
     * @return String representation of the song
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("song title ");
        sb.append(title);
        sb.append("\nsong artist ");
        sb.append(artist);
        sb.append("\nsong genre ");
        sb.append(genre);
        sb.append("\nsong year ");
        sb.append(year);
        sb.append("\nheard\n");
        sb.append("reading" + getPercent(false)[0]);
        sb.append(" art" + getPercent(false)[1]);
        sb.append(" sports" + getPercent(false)[2]);
        sb.append(" music" + getPercent(false)[3]);
        sb.append("\nlikes\n");
        sb.append("reading" + getPercent(true)[0]);
        sb.append(" art" + getPercent(true)[1]);
        sb.append(" sports" + getPercent(true)[2]);
        sb.append(" music" + getPercent(true)[3] + "\n");
        return sb.toString();
    }


    /**
     * Creates total numbers for people in each major
     * 
     * @param p
     *            the person to add
     * @param i
     *            the count in the for loop
     */
    public void addPerson(Person p, int i) {
        if (p.getLiked()[i] != null && (p.getLiked()[i].equals("Yes") || p
            .getLiked()[i].equals("No"))) {
            addLike(p, p.getLiked()[i].contains("Yes"));
        }

        if (p.getHeard()[i] != null && (p.getHeard()[i].equals("Yes") || p
            .getHeard()[i].equals("No"))) {
            addHeard(p, p.getHeard()[i].contains("Yes"));
        }

    }
}
